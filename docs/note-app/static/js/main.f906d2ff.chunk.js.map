{"version":3,"sources":["features/login/loginSlice.ts","features/login/Login.tsx","components/NativeText.tsx","features/training/trainingSlice.ts","features/training/Training.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["loginSlice","createSlice","name","initialState","state","apiKey","clientId","reducers","setApiKey","action","payload","setClientId","setState","actions","selectState","login","Login","useSelector","dispatch","useDispatch","Container","fluid","Form","Group","Label","Control","type","value","onChange","e","target","Button","onClick","getState","params","scope","discoveryDocs","gapi","load","console","log","JSON","stringify","client","init","then","googleAuth","auth2","getAuthInstance","isSignedIn","listen","signIn","catch","error","arguments","join","nodes","sep","iter","Symbol","iterator","cur","next","done","NativeText","props","anchors","children","split","map","w","idx","href","str","replace","rel","key","Array","from","trainingSlice","spreadsheetId","sheet","data","ptr","visibility","setSpreadsheetId","setData","length","toggleVisibility","prev","selectCurrent","training","Training","current","Navbar","variant","bg","inline","FormControl","className","sheets","spreadsheets","values","get","range","response","result","colMap","Object","fromEntries","filter","cell","slice","row","section","Number","num","ja","en","grammar","note","Row","Col","Card","Header","Body","fixed","Nav","App","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","loginReducer","trainingReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f906d2ff.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"../../app/store\";\n\ntype State = 'ANON' | 'AUTHED';\n\ninterface LoginState {\n    state: State;\n    apiKey: string,\n    clientId: string,\n};\n\nconst initialState: LoginState = {\n    state: 'ANON',\n    // state: 'AUTHED',\n    apiKey: '',\n    clientId: '',\n};\n\n/*\n    params: JSON.stringify({\n      apiKey: 'YOUR_API_KEY',\n      clientId: 'YOUR_CLIENT_ID',\n      scope: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n      discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }),\n*/\n\nexport const loginSlice = createSlice({\n    name: 'login',\n    initialState,\n    reducers: {\n        setApiKey: (state, action: PayloadAction<string>) => {\n            state.apiKey = action.payload;\n        },\n        setClientId: (state, action: PayloadAction<string>) => {\n            state.clientId = action.payload;\n        },\n        setState: (state, action: PayloadAction<State>) => {\n            state.state = action.payload;\n        },\n    }\n});\n\nexport const {setApiKey, setClientId, setState} = loginSlice.actions;\n\nexport const selectState = (state: RootState) => state.login;\n\nexport const login = (): AppThunk => (dispatch, getState) => {\n    const {apiKey, clientId} = getState().login;\n    const params = {\n      apiKey: apiKey,\n      clientId: clientId,\n      scope: 'https://www.googleapis.com/auth/spreadsheets.readonly',\n      discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4']\n    };\n    gapi.load('client:auth2', () => {\n        console.log('client:auth2 has been loaded');\n        console.log(JSON.stringify(params));\n        gapi.client\n            .init(params)\n            .then(() => {\n                console.log();\n                const googleAuth = gapi.auth2.getAuthInstance();\n                googleAuth.isSignedIn.listen(() => dispatch(setState('AUTHED')));\n                googleAuth.signIn().then(() => dispatch(setState('AUTHED')));\n            })\n            .catch(function () {console.error(arguments)});\n    });\n};\n\nexport default loginSlice.reducer;\n","import React from 'react';\nimport { Button, Container, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectState, setApiKey, setClientId, login } from './loginSlice';\n\nexport function Login() {\n    const {apiKey, clientId} = useSelector(selectState);\n    const dispatch = useDispatch();\n    return (\n        <Container fluid=\"sm\">\n            <Form>\n                <Form.Group>\n                    <Form.Label>API Key</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={apiKey}\n                        onChange={e => dispatch(setApiKey(e.target.value))}\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Client ID</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={clientId}\n                        onChange={e => dispatch(setClientId(e.target.value))}\n                    />\n                </Form.Group>\n            </Form>\n            <Button onClick={() => dispatch(login())}>Login</Button>\n        </Container>\n    );\n};\n","import React, { ReactNode } from \"react\";\n\nconst DICT_URL_PREFIX = 'https://dictionary.cambridge.org/dictionary/english';\n\ninterface Props extends React.HTMLProps<HTMLAnchorElement> {\n    children?: string;\n};\n\n\nfunction strip(str: string) {\n    return str\n        .replace(/^\\s|\\s$/, '')\n        .replace(/'s?$/, '')\n        .replace(/[.,]$/, '')\n    ;\n}\n\n\nfunction* join(nodes: Iterable<ReactNode>, sep: ReactNode) {\n    const iter: Iterator<ReactNode> = nodes[Symbol.iterator]();\n    let cur = iter.next();\n    while (!cur.done) {\n        yield cur.value;\n        yield sep;\n        cur = iter.next();\n    }\n}\n\nexport function NativeText(props: Props) {\n    const anchors = (props.children || '')\n        .split(' ')\n        .map((w, idx) => (\n            <a\n                {...props}\n                href={`${DICT_URL_PREFIX}/${strip(w)}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                key={idx}\n            >{w}</a>\n        ))\n    ;\n    return (\n        <>\n        {Array.from(join(anchors, ' '))}\n        </>\n    );\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"../../app/store\";\n\nconst COL_SECTION = 'section';\nconst COL_NUMBER = '#';\nconst COL_JA = '日本語';\nconst COL_EN = '英語';\nconst COL_GRAMMAR = '構文';\nconst COL_NOTE = '備考';\n\ntype State = 'READY' | 'LOADING' | 'LOADED' | 'FAILED';\ntype Visibility = 'HIDDEN' | 'SHOWN';\n\ninterface Row {\n    section: number,\n    num: number,\n    ja: string,\n    en: string,\n    grammar: string,\n    note: string,\n};\n\ninterface TrainingState {\n    state: State;\n    spreadsheetId: string | null,\n    sheet: string | null,\n    data: null | Array<Row>,\n    ptr: number,\n    visibility: Visibility,\n};\n\n\nconst EXAMPLE: Array<Row> = [\n    {\"section\":1,\"num\":1,\"ja\":\"スーザンの家のいちばん大きい部屋は居間でです。\",\"en\":\"The largetst room in Suzan's house is the living room.\",\"grammar\":\"\",\"note\":\"\"},\n    {\"section\":1,\"num\":2,\"ja\":\"（その）隣の部屋は食堂です。\",\"en\":\"The next room is the dining room.\",\"grammar\":\"\",\"note\":\"\"},\n    {\"section\":1,\"num\":3,\"ja\":\"浴室は玄関のはずれにあります。\",\"en\":\"The bathroom is at the end of the hall.\",\"grammar\":\"\",\"note\":\"\"},\n];\n\nconst initialState: TrainingState = {\n    state: 'READY',\n    spreadsheetId: null,\n    sheet: 'Sheet1',\n    data: null,\n    ptr: 0,\n    visibility: 'HIDDEN',\n    // state: 'LOADED',\n    // spreadsheetId: 'XXX',\n    // data: EXAMPLE,\n};\n\n\nexport const trainingSlice = createSlice({\n    name: 'training',\n    initialState,\n    reducers: {\n        setState: (state, action: PayloadAction<State>) => {\n            state.state = action.payload;\n        },\n\n        setSpreadsheetId: (state, action: PayloadAction<string>) => {\n            state.spreadsheetId = action.payload;\n        },\n\n        setData: (state, action: PayloadAction<Array<Row>>) => {\n            state.data = action.payload;\n        },\n\n        next: (state) => {\n            if (\n                state.data !== null &&\n                state.ptr < (state.data.length - 1)\n            ) {\n                state.ptr++;\n                state.visibility = 'HIDDEN';\n            }\n        },\n\n        toggleVisibility: (state) => {\n            if (state.data !== null) {\n                if (state.visibility === 'HIDDEN') {\n                    state.visibility = 'SHOWN';\n                }\n                else if (state.visibility === 'SHOWN') {\n                    state.visibility = 'HIDDEN';\n                }\n            }\n        },\n\n        prev: (state) => {\n            if (\n                state.data !== null &&\n                state.ptr > 0\n            ) {\n                state.ptr--;\n                state.visibility = 'HIDDEN';\n            }\n        },\n    }\n});\n\nexport const {setState, setSpreadsheetId, setData, next, prev, toggleVisibility} = trainingSlice.actions;\n\nexport const selectCurrent = (state: RootState) =>\n    state.training.data === null\n        ? null\n        : state.training.data[state.training.ptr]\n;\nexport const selectState = (state: RootState) => state.training;\n\nexport const load = (): AppThunk => (dispatch, getState) => {\n    const {spreadsheetId, sheet} = getState().training;\n    console.log('start load', {spreadsheetId, sheet});\n    if (spreadsheetId && sheet) {\n        dispatch(setState('LOADING'));\n        gapi.client.sheets.spreadsheets.values\n            .get({spreadsheetId: spreadsheetId, range: sheet})\n            .then((response) => {\n                if (response.result.values) {\n                    const colMap: {[key: string]: number} = Object.fromEntries(\n                        response.result.values[0]\n                        .filter(cell => !!cell)\n                        .map((cell, idx) => [cell, idx])\n                    );\n                    const data = response.result.values\n                        .slice(1)\n                        .map((row) => ({\n                            section: Number(row[colMap[COL_SECTION]]) || 0,\n                            num: Number(row[colMap[COL_NUMBER]]) || 0,\n                            ja: row[colMap[COL_JA]] || '',\n                            en: row[colMap[COL_EN]] || '',\n                            grammar: row[colMap[COL_GRAMMAR]] || '',\n                            note: row[colMap[COL_NOTE]] || '',\n                        }));\n                    dispatch(setData(data));\n                    console.log('loaded', {data})\n                }\n                dispatch(setState('LOADED'));\n            })\n            .catch(function () {\n                console.error({arguments});\n                dispatch(setState('FAILED'));\n            })\n    }\n};\n\nexport default trainingSlice.reducer;\n\n","import React from \"react\";\nimport { Button, Container, Row, Col, Navbar, Form, FormControl, Nav, Card } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { NativeText } from \"../../components/NativeText\";\nimport { selectState, selectCurrent, setSpreadsheetId, next, prev, load, toggleVisibility } from \"./trainingSlice\";\n\nexport function Training() {\n    const {spreadsheetId, visibility, state} = useSelector(selectState);\n    const current = useSelector(selectCurrent);\n    const dispatch = useDispatch();\n    return (\n        <div>\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Form inline>\n                    <FormControl\n                        type=\"text\"\n                        value={spreadsheetId || ''}\n                        className=\"mr-sm-2\"\n                        onChange={(e) => dispatch(setSpreadsheetId(e.target.value))}\n                    />\n                    <Button\n                        variant=\"outline-info\"\n                        onClick={() => dispatch(load())}\n                    >Load</Button>\n                </Form>\n            </Navbar>\n            <Container fluid>\n                {(() => {switch (state) {\n                    case 'READY': {return (\n                        <Row><Col>\n                            <p>^ INPUT SPREADSHEET ID</p>\n                        </Col></Row>\n                    );}\n                    case 'LOADING': {return (\n                        <Row><Col>\n                            <p>LOADING</p>\n                        </Col></Row>\n                    );}\n                    case 'FAILED': {return (\n                        <Row><Col>\n                            <p>FAILED</p>\n                        </Col></Row>\n                    );}\n                    case 'LOADED': {return (\n                        <Row><Col>\n                            <Card className=\"mt-3\">\n                                <Card.Header>JA</Card.Header>\n                                <Card.Body>{current?.ja}</Card.Body>\n                            </Card>\n                            <Card className=\"mt-3\">\n                                <Card.Header>EN</Card.Header>\n                                <Card.Body className={visibility === 'SHOWN' ? 'vibible' : 'invisible'}>\n                                    <NativeText className=\"text-body\">{current?.en}</NativeText>\n                                </Card.Body>\n                            </Card>\n                        </Col></Row>\n                    );}\n                }})()}\n            </Container>\n            <Navbar fixed=\"bottom\" variant=\"dark\" bg=\"dark\">\n                <Container fluid>\n                    <Nav className=\"ms-auto\">\n                        <Button\n                            variant=\"outline-info\"\n                            onClick={() => dispatch(prev())}\n                        >Prev</Button>\n                    </Nav>\n                    <Nav className=\"me-auto ms-auto\">\n                        <Button\n                            variant=\"outline-info\"\n                            onClick={() => dispatch(toggleVisibility())}\n                        >TOGGLE ANSWER</Button>\n                    </Nav>\n                    <Nav className=\"me-auto\">\n                        <Button\n                            className=\"me-auto\"\n                            variant=\"outline-info\"\n                            onClick={() => dispatch(next())}\n                        >Next</Button>\n                    </Nav>\n                </Container>\n            </Navbar>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Login } from './features/login/Login';\nimport { selectState } from './features/login/loginSlice';\nimport { Training } from './features/training/Training';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nfunction App() {\n  const loginState = useSelector(selectState).state;\n\n  if (loginState === 'ANON') {\n    return (\n      <Login />\n    );\n  } else {\n    return (\n      <Container fluid=\"sm\">\n        <Row>\n          <Col>\n            <Training />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\nexport default App;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport loginReducer from '../features/login/loginSlice';\nimport trainingReducer from '../features/training/trainingSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    login: loginReducer,\n    training: trainingReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}