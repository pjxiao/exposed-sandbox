{"version":3,"sources":["features/login/loginSlice.ts","features/login/Login.tsx","components/NativeText.tsx","repositories/SpreadsheetRepository.ts","features/training/trainingSlice.ts","features/training/Training.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["loginSlice","createSlice","name","initialState","state","apiKey","clientId","reducers","setApiKey","action","payload","setClientId","setState","actions","selectState","login","Login","useSelector","dispatch","useDispatch","Container","fluid","Form","Group","Label","Control","type","value","onChange","e","target","Button","onClick","getState","params","scope","discoveryDocs","gapi","load","console","log","client","init","then","googleAuth","auth2","getAuthInstance","isSignedIn","listen","signIn","catch","error","join","nodes","sep","iter","Symbol","iterator","cur","next","done","NativeText","props","anchors","children","replace","split","map","w","idx","href","str","rel","key","Array","from","SPREADSHEETS_KEY","ROWS_KEY","list","JSON","parse","window","localStorage","getItem","trainingSlice","spreadsheetId","sheet","data","ptr","visibility","clearState","setSpreadsheetId","setData","length","toggleVisibility","prev","selectCurrent","training","post","sheets","spreadsheets","get","response","push","title","result","properties","setItem","stringify","Promise","_","reject","postSpreadsheet","setLoginState","openSpreadsheet","sheetName","existings","rows","filter","row","resolve","values","range","cells","rowIndex","concat","Error","getSpreadsheet","allRows","slice","header","colMap","Object","fromEntries","cell","section","Number","num","ja","String","en","note","TrainingList","useState","Navbar","variant","bg","inline","FormControl","className","ListGroup","i","Item","TrainingDetail","current","Brand","Nav","Link","Row","Col","Card","Header","Body","fixed","Training","App","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","loginReducer","trainingReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f66a48cc.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"../../app/store\";\n\ntype State = 'PENDING' | 'REQUESTED' | 'AUTHED';\n\ninterface LoginState {\n    state: State;\n    apiKey: string,\n    clientId: string,\n};\n\nconst initialState: LoginState = {\n    state: 'PENDING',\n    apiKey: '',\n    clientId: '',\n};\n\n/*\n    params: JSON.stringify({\n      apiKey: 'YOUR_API_KEY',\n      clientId: 'YOUR_CLIENT_ID',\n      scope: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n      discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }),\n*/\n\nexport const loginSlice = createSlice({\n    name: 'login',\n    initialState,\n    reducers: {\n        setApiKey: (state, action: PayloadAction<string>) => {\n            state.apiKey = action.payload;\n        },\n        setClientId: (state, action: PayloadAction<string>) => {\n            state.clientId = action.payload;\n        },\n        setState: (state, action: PayloadAction<State>) => {\n            state.state = action.payload;\n        },\n    }\n});\n\nexport const {setApiKey, setClientId, setState} = loginSlice.actions;\n\nexport const selectState = (state: RootState) => state.login;\n\nexport const login = (): AppThunk => (dispatch, getState) => {\n    const {apiKey, clientId} = getState().login;\n    const params = {\n      apiKey: apiKey,\n      clientId: clientId,\n      scope: 'https://www.googleapis.com/auth/spreadsheets.readonly',\n      discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4']\n    };\n    gapi.load('client:auth2', () => {\n        console.log('client:auth2 has been loaded');\n        // console.log(JSON.stringify(params));\n        gapi.client\n            .init(params)\n            .then(() => {\n                const googleAuth = gapi.auth2.getAuthInstance();\n                googleAuth.isSignedIn.listen(() => dispatch(setState('AUTHED')));\n                googleAuth.signIn().then(() => dispatch(setState('AUTHED')));\n            })\n            .catch((e) => console.error(e));\n    });\n};\n\nexport default loginSlice.reducer;\n","import React from 'react';\nimport { Button, Container, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectState, setApiKey, setClientId, login } from './loginSlice';\n\nexport function Login() {\n    const {apiKey, clientId} = useSelector(selectState);\n    const dispatch = useDispatch();\n    return (\n        <Container fluid=\"sm\">\n            <Form>\n                <Form.Group>\n                    <Form.Label>API Key</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={apiKey}\n                        onChange={e => dispatch(setApiKey(e.target.value))}\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Client ID</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={clientId}\n                        onChange={e => dispatch(setClientId(e.target.value))}\n                    />\n                </Form.Group>\n            </Form>\n            <Button onClick={() => dispatch(login())}>Login</Button>\n        </Container>\n    );\n};\n","import React, { ReactNode } from \"react\";\n\nconst DICT_URL_PREFIX = 'https://dictionary.cambridge.org/dictionary/english';\n\ninterface Props extends React.HTMLProps<HTMLAnchorElement> {\n    children?: string;\n};\n\n\nfunction strip(str: string) {\n    return str\n        .replace(/^\\s|\\s$/, '')\n        .replace(/'s?$/, '')\n        .replace(/[.,]$/, '')\n    ;\n}\n\n\nfunction* join(nodes: Iterable<ReactNode>, sep: ReactNode) {\n    const iter: Iterator<ReactNode> = nodes[Symbol.iterator]();\n    let cur = iter.next();\n    while (!cur.done) {\n        yield cur.value;\n        yield sep;\n        cur = iter.next();\n    }\n}\n\nexport function NativeText(props: Props) {\n    const anchors = (props.children || '')\n        .replace(/([a-zA-Z0-9])([^a-zA-Z0-9/'., -])/g, '$1 $2')\n        .replace(/([^a-zA-Z0-9/'., -])([a-zA-Z0-9])/g, '$1 $2')\n        .split(' ')\n        .map((w, idx) => (\n            <a\n                {...props}\n                href={`${DICT_URL_PREFIX}/${strip(w)}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                key={idx}\n            >{w}</a>\n        ))\n    ;\n    return (\n        <>\n        {Array.from(join(anchors, ' '))}\n        </>\n    );\n};\n","export type Spreadseet = {\n    spreadsheetId: string,\n    title: string,\n};\n\ntype Row = {\n    spreadsheetId: string,\n    rowIndex: number,\n    cells: Array<number | string | null | undefined>,\n};\n\nconst SPREADSHEETS_KEY = 'SPREADSHEETS';\nconst ROWS_KEY = 'ROWS';\n\n\nexport const list = (reload: boolean = false):Array<Spreadseet> => {\n    return JSON.parse(window.localStorage.getItem(SPREADSHEETS_KEY) || '[]');\n};\n\n\nexport const get = (spreadsheetId: string, sheetName: string): Promise<Row[]> => {\n    let promise: Promise<Row[]>;\n    const existings: Row[] = JSON.parse(window.localStorage.getItem(ROWS_KEY) || '[]');\n    const rows: Row[] = existings.filter((row: Row) => row.spreadsheetId === spreadsheetId);\n    if (rows.length > 0) {\n        promise = new Promise((resolve) => resolve(rows));\n    } else {\n        promise = gapi.client?.sheets?.spreadsheets.values\n            .get({spreadsheetId: spreadsheetId, range: sheetName})\n            .then((response) => {\n                if (response.result.values) {\n                    const rows = response.result.values\n                        .map((cells, rowIndex): Row => ({\n                            spreadsheetId,\n                            rowIndex,\n                            cells,\n                        }));\n                    window.localStorage.setItem(ROWS_KEY, JSON.stringify(existings.concat(rows)));\n                    return rows;\n                } else {\n                    throw Error(JSON.stringify(response));\n                }\n            });\n    }\n    if (promise) {\n        return promise;\n    } else {\n        const err: Promise<Row[]> = new Promise((_, reject) => reject('Not authorized'))\n        return err;\n    }\n};\n\nexport const del = (spreadsheetId: string) => {\n    const sheets: Spreadseet[] = list().filter(s => s.spreadsheetId !== spreadsheetId);\n    window.localStorage.setItem(SPREADSHEETS_KEY, JSON.stringify(sheets));\n\n    const rows: Row[] = JSON.parse(window.localStorage.getItem(ROWS_KEY) || '[]')\n        .filter((row: Row) => row.spreadsheetId !== spreadsheetId);\n    window.localStorage.setItem(ROWS_KEY, JSON.stringify(rows));\n};\n\nexport const post = (spreadsheetId: string) => {\n    const promise = gapi.client?.sheets?.spreadsheets\n        .get({spreadsheetId})\n        .then((response) => {\n            console.log(response);\n            const sheets = list();\n            sheets.push({\n                spreadsheetId,\n                title: response.result.properties?.title || 'UNKNOWN',\n            })\n            window.localStorage.setItem(SPREADSHEETS_KEY, JSON.stringify(sheets));\n        });\n    return promise || new Promise((_, reject) => reject('Not authorized'))\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"../../app/store\";\nimport { post as postSpreadsheet, get as getSpreadsheet } from \"../../repositories/SpreadsheetRepository\";\nimport { setState as setLoginState } from \"../../features/login/loginSlice\";\n\nconst COL_SECTION = 'section';\nconst COL_NUMBER = '#';\nconst COL_JA = '日本語';\nconst COL_EN = '英語';\nconst COL_NOTE = '解説';\n\ntype State = 'READY' | 'LOADING' | 'LOADED' | 'FAILED';\ntype Visibility = 'HIDDEN' | 'SHOWN';\n\ninterface Row {\n    section: number,\n    num: number,\n    ja: string,\n    en: string,\n    note: string,\n};\n\ninterface TrainingState {\n    state: State;\n    spreadsheetId: string | null,\n    sheet: string | null,\n    data: null | Array<Row>,\n    ptr: number,\n    visibility: Visibility,\n};\n\n\n/*\nconst EXAMPLE: Array<Row> = [\n    {\"section\":1,\"num\":1,\"ja\":\"スーザンの家のいちばん大きい部屋は居間でです。\",\"en\":\"The largetst room in Suzan's house is the living room.\",\"note\":\"\"},\n    {\"section\":1,\"num\":2,\"ja\":\"（その）隣の部屋は食堂です。\",\"en\":\"The next room is the dining room.\",\"note\":\"\"},\n    {\"section\":1,\"num\":3,\"ja\":\"浴室は玄関のはずれにあります。\",\"en\":\"The bathroom is at the end of the hall.\",\"note\":\"\"},\n];\n*/\n\nconst initialState: TrainingState = {\n    state: 'READY',\n    spreadsheetId: null,\n    sheet: 'Sheet1',\n    data: null,\n    ptr: 0,\n    visibility: 'HIDDEN',\n    // state: 'LOADED',\n    // spreadsheetId: 'XXX',\n    // data: EXAMPLE,\n};\n\n\nexport const trainingSlice = createSlice({\n    name: 'training',\n    initialState,\n    reducers: {\n        clearState: (state) => {\n            state.state = 'READY';\n            state.spreadsheetId = null;\n            state.data = null;\n        },\n        setState: (state, action: PayloadAction<State>) => {\n            state.state = action.payload;\n        },\n\n        setSpreadsheetId: (state, action: PayloadAction<string>) => {\n            state.spreadsheetId = action.payload;\n        },\n\n        setData: (state, action: PayloadAction<Array<Row>>) => {\n            state.data = action.payload;\n        },\n\n        next: (state) => {\n            if (\n                state.data !== null &&\n                state.ptr < (state.data.length - 1)\n            ) {\n                state.ptr++;\n                state.visibility = 'HIDDEN';\n            }\n        },\n\n        toggleVisibility: (state) => {\n            if (state.data !== null) {\n                if (state.visibility === 'HIDDEN') {\n                    state.visibility = 'SHOWN';\n                }\n                else if (state.visibility === 'SHOWN') {\n                    state.visibility = 'HIDDEN';\n                }\n            }\n        },\n\n        prev: (state) => {\n            if (\n                state.data !== null &&\n                state.ptr > 0\n            ) {\n                state.ptr--;\n                state.visibility = 'HIDDEN';\n            }\n        },\n    }\n});\n\nexport const {clearState, setState, setSpreadsheetId, setData, next, prev, toggleVisibility} = trainingSlice.actions;\n\nexport const selectCurrent = (state: RootState) =>\n    state.training.data === null\n        ? null\n        : state.training.data[state.training.ptr]\n;\nexport const selectState = (state: RootState) => state.training;\n\nexport const post = (spreadsheetId: string): AppThunk => (dispatch, getState) => {\n    postSpreadsheet(spreadsheetId)\n        .catch(e => {\n            if (e === 'Not authorized') {\n                dispatch(setLoginState('REQUESTED'));\n            }\n        }).catch(console.error);\n};\n\nexport const openSpreadsheet = (spreadsheetId: string): AppThunk => (dispatch) => {\n    dispatch(setState('LOADING'))\n    getSpreadsheet(spreadsheetId, 'Sheet1')\n        .then(allRows => {\n            const [header, rows] = [allRows[0], allRows.slice(1)]\n            const colMap: {[key: string]: number} = Object.fromEntries(\n                header.cells\n                .filter(cell => !!cell)\n                .map((cell, idx) => [cell, idx])\n            );\n            const data = rows\n                .map((row) => ({\n                    section: Number(row.cells[colMap[COL_SECTION]]) || 0,\n                    num: Number(row.cells[colMap[COL_NUMBER]]) || 0,\n                    ja: String(row.cells[colMap[COL_JA]] || ''),\n                    en: String(row.cells[colMap[COL_EN]] || ''),\n                    note: String(row.cells[colMap[COL_NOTE]] || ''),\n                }));\n            dispatch(setState('LOADED'))\n            dispatch(setSpreadsheetId(spreadsheetId))\n            dispatch(setData(data));\n            console.log('loaded', {data})\n        })\n        .catch(e => {\n            if (e === 'Not authorized') {\n                dispatch(setLoginState('REQUESTED'));\n            }\n        }).catch(console.error);\n};\n\n\nexport default trainingSlice.reducer;\n\n","import React, { useState } from \"react\";\nimport { Button, Container, Row, Col, Navbar, Form, FormControl, Nav, Card, ListGroup } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { NativeText } from \"../../components/NativeText\";\nimport { list } from \"../../repositories/SpreadsheetRepository\";\nimport {\n    selectState,\n    selectCurrent,\n    openSpreadsheet,\n    next,\n    prev,\n    toggleVisibility,\n    post,\n    clearState,\n} from \"./trainingSlice\";\n\n\nconst TrainingList = () => {\n    const dispatch = useDispatch();\n    const [spreadsheetId, setSpreadsheetId] = useState('');\n\n    const sheets = list();\n    return (\n        <>\n        <Navbar variant=\"dark\" bg=\"dark\">\n            <Form inline>\n                <FormControl\n                    type=\"text\"\n                    value={spreadsheetId}\n                    className=\"mr-sm-2\"\n                    onChange={(e) => setSpreadsheetId(e.target.value)}\n                />\n                <Button\n                    variant=\"outline-info\"\n                    onClick={() => dispatch(post(spreadsheetId))}\n                >Load</Button>\n            </Form>\n        </Navbar>\n        <ListGroup>\n            {sheets.map((sheet, i) => (\n                <ListGroup.Item\n                    key={i}\n                    action\n                    variant='flash'\n                    onClick={() => dispatch(openSpreadsheet(sheet.spreadsheetId))}\n                >{sheet.title}</ListGroup.Item>\n            ))}\n        </ListGroup>\n        </>\n    );\n};\n\n\nexport function TrainingDetail() {\n    const {spreadsheetId, visibility, state} = useSelector(selectState);\n    const current = useSelector(selectCurrent);\n    const dispatch = useDispatch();\n    return (\n        <>\n            <header>\n                <Navbar variant=\"dark\" bg=\"dark\" className=\"overflow-auto\">\n                    <Navbar.Brand>{spreadsheetId}</Navbar.Brand>\n                    <Nav>\n                        <Nav.Link onClick={() => dispatch(clearState())}>LIST</Nav.Link>\n                    </Nav>\n                </Navbar>\n            </header>\n            <Container fluid className=\"mb-5\">\n                {(() => {switch (state) {\n                    case 'READY': {return (\n                        <Row><Col>\n                            <p>^ INPUT SPREADSHEET ID</p>\n                        </Col></Row>\n                    );}\n                    case 'LOADING': {return (\n                        <Row><Col>\n                            <p>LOADING</p>\n                        </Col></Row>\n                    );}\n                    case 'FAILED': {return (\n                        <Row><Col>\n                            <p>FAILED</p>\n                        </Col></Row>\n                    );}\n                    case 'LOADED': {return (\n                        <Row><Col>\n                            <Card className=\"mt-3\">\n                                <Card.Header>JA</Card.Header>\n                                <Card.Body>{current?.ja}</Card.Body>\n                            </Card>\n                            <Card className=\"mt-3\">\n                                <Card.Header>EN</Card.Header>\n                                <Card.Body className={visibility === 'SHOWN' ? 'vibible' : 'invisible'}>\n                                    <NativeText className=\"text-body\">{current?.en}</NativeText>\n                                </Card.Body>\n                            </Card>\n                            <Card className=\"mt-3\">\n                                <Card.Header>NOTE</Card.Header>\n                                <Card.Body className={visibility === 'SHOWN' ? 'vibible' : 'invisible'}>\n                                    <NativeText className=\"text-body\">{current?.note || 'n/a'}</NativeText>\n                                </Card.Body>\n                            </Card>\n                        </Col></Row>\n                    );}\n                }})()}\n            </Container>\n            <Navbar fixed=\"bottom\" variant=\"dark\" bg=\"dark\">\n                <Container fluid>\n                    <Nav className=\"ms-auto\">\n                        <Button\n                            variant=\"outline-info\"\n                            onClick={() => dispatch(prev())}\n                        >Prev</Button>\n                    </Nav>\n                    <Nav className=\"me-auto ms-auto\">\n                        <Button\n                            variant=\"outline-info\"\n                            onClick={() => dispatch(toggleVisibility())}\n                        >TOGGLE ANSWER</Button>\n                    </Nav>\n                    <Nav className=\"me-auto\">\n                        <Button\n                            className=\"me-auto\"\n                            variant=\"outline-info\"\n                            onClick={() => dispatch(next())}\n                        >Next</Button>\n                    </Nav>\n                </Container>\n            </Navbar>\n        </>\n    );\n\n};\n\n\nexport function Training() {\n    const {spreadsheetId} = useSelector(selectState);\n    if (spreadsheetId === null) {\n        return (<TrainingList/>);\n    } else {\n        return (<TrainingDetail />);\n    }\n\n\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Login } from './features/login/Login';\nimport { selectState } from './features/login/loginSlice';\nimport { Training } from './features/training/Training';\n\nfunction App() {\n  const loginState = useSelector(selectState).state;\n\n  if (loginState === 'REQUESTED') {\n    return (\n      <Login />\n    );\n  } else {\n    return (\n      <Training />\n    );\n  }\n}\n\nexport default App;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport loginReducer from '../features/login/loginSlice';\nimport trainingReducer from '../features/training/trainingSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    login: loginReducer,\n    training: trainingReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}